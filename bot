import ccxt
import pandas as pd
import numpy as np
import time
import requests

# === Telegram Config ===
TELEGRAM_TOKEN = '7429189088:AAFmr53fAmwwp5H8NnC7JxEpD_B6a5Bui7g'
TELEGRAM_CHAT_ID = '6607021532'

def send_telegram(message):
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message
    }
    try:
        requests.post(url, data=payload)
        print("‚úÖ Telegram alert sent.")
    except Exception as e:
        print("‚ùå Telegram error:", e)

# === Binance Config (Read-only) ===
exchange = ccxt.binance({
    'enableRateLimit': True,
})

symbol = "BNB/USDT"
timeframe = "5m"
sampling_period = 100
range_multiplier = 3.0

def fetch_data():
    bars = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=sampling_period + 10)
    df = pd.DataFrame(bars, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    return df

def smooth_range(df, t, m):
    wper = t * 2 - 1
    x = df['close']
    avrng = x.diff().abs().ewm(span=t).mean()
    smoothrng = avrng.ewm(span=wper).mean() * m
    return smoothrng

def range_filter(src, smoothrng):
    filt = [src[0]]
    for i in range(1, len(src)):
        prev = filt[-1]
        r = smoothrng[i]
        if src[i] > prev:
            filt.append(src[i] - r if src[i] - r > prev else prev)
        else:
            filt.append(src[i] + r if src[i] + r < prev else prev)
    return pd.Series(filt)

def detect_signals(df):
    df['smrng'] = smooth_range(df, sampling_period, range_multiplier)
    df['filt'] = range_filter(df['close'], df['smrng'])
    df['upward'] = (df['filt'] > df['filt'].shift(1)).astype(int)
    df['downward'] = (df['filt'] < df['filt'].shift(1)).astype(int)

    df['longCond'] = (
        (df['close'] > df['filt']) &
        ((df['close'] > df['close'].shift(1)) | (df['close'] < df['close'].shift(1))) &
        (df['upward'] > 0)
    )

    df['shortCond'] = (
        (df['close'] < df['filt']) &
        ((df['close'] > df['close'].shift(1)) | (df['close'] < df['close'].shift(1))) &
        (df['downward'] > 0)
    )

    last_row = df.iloc[-1]
    return last_row['longCond'], last_row['shortCond'], last_row['close']

# === Run Bot ===
print("üîÅ Bot started. Scanning every 30 seconds...")

last_signal = None  # To avoid duplicate alerts

while True:
    try:
        df = fetch_data()
        is_buy, is_sell, price = detect_signals(df)

        if is_buy and last_signal != 'buy':
            msg = f"üü¢ Buy Signal Detected for {symbol} at ${price:.2f}"
            send_telegram(msg)
            last_signal = 'buy'

        elif is_sell and last_signal != 'sell':
            msg = f"üî¥ Sell Signal Detected for {symbol} at ${price:.2f}"
            send_telegram(msg)
            last_signal = 'sell'

        else:
            print("No new signal.")

    except Exception as e:
        print("‚ö†Ô∏è Error:", e)
        send_telegram(f"‚ö†Ô∏è Bot error: {e}")

    time.sleep(30)
